name: Haskell CI

on:
  workflow_dispatch:
  pull_request:
    types: [synchronize, opened, reopened]
  push:
    branches: [main]
  schedule:
    # additionally run once per day (At 00:00) to maintain cache
    - cron: '0 0 * * *'

jobs:
  tests:
    name: Haksell
    runs-on: ubuntu-latest
        
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v30
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        nix_path: nixpkgs=channel:nixos-unstable
    - name: lint
      env:
        HLINT_VERSION: "3.8"
      run: |
        curl -L https://github.com/ndmitchell/hlint/releases/download/v${HLINT_VERSION}/hlint-${HLINT_VERSION}-x86_64-linux.tar.gz --output hlint.tar.gz
        tar -xvf hlint.tar.gz
        ./hlint-${HLINT_VERSION}/hlint src/ test/

    - name: Install dependencies
      run: |
        nix develop --command stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks --only-dependencies

    - name: Build
      run: |
        nix develop --command stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks

    - name: Test
      run: |
        nix develop --command stack test --system-ghc
  # cabal:
  #   name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macOS-latest, windows-latest]
  #       cabal: ["latest"]
  #       ghc:
  #         - "latest"
  #       # exclude:
  #         # - os: macOS-latest
  #         #   ghc: 9.0.2
  #         # - os: macOS-latest
  #         #   ghc: 8.10.7

  #         # - os: windows-latest
  #         #   ghc: 9.0.2
  #         # - os: windows-latest
  #         #   ghc: 8.10.7

  #   steps:
  #   - uses: actions/checkout@v4

  #   - uses: haskell/actions/setup@v2
  #     id: setup-haskell-cabal
  #     name: Setup Haskell
  #     with:
  #       ghc-version: ${{ matrix.ghc }}
  #       cabal-version: ${{ matrix.cabal }}
  #       enable-stack: true
  #       stack-version: "latest"

  #   - name: Configure
  #     run: |
  #       cabal configure --enable-tests --enable-benchmarks --enable-documentation --test-show-details=direct --write-ghc-environment-files=always

  #   - name: Freeze
  #     run: |
  #       cabal freeze

  #   - uses: actions/cache@v4
  #     name: Cache ~/.cabal/store
  #     with:
  #       path: ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
  #       key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}

  #   - name: Install dependencies
  #     run: |
  #       cabal build all --only-dependencies

  #   - name: Build
  #     run: |
  #       cabal build all

  #   - name: Test
  #     run: |
  #       cabal test all

  #   - name: Documentation
  #     run: |
  #       cabal haddock

  # stack:
  #   name: stack / ghc ${{ matrix.ghc }}
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       stack: ["latest"]
  #       ghc: ["latest"]

  #   steps:
  #   - uses: actions/checkout@v4

  #   - uses: haskell/actions/setup@v2
  #     name: Setup Haskell Stack
  #     with:
  #       ghc-version: ${{ matrix.ghc }}
  #       stack-version: ${{ matrix.stack }}
  #       enable-stack: true

  #   - uses: actions/cache@v4
  #     name: Cache ~/.stack
  #     with:
  #       path: ~/.stack
  #       key: ${{ runner.os }}-${{ matrix.ghc }}-stack

  #   - name: Install dependencies
  #     run: |
  #       stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks --only-dependencies

  #   - name: Build
  #     run: |
  #       stack build --system-ghc --test --bench --no-run-tests --no-run-benchmarks

  #   - name: Test
  #     run: |
  #       stack test --system-ghc
  # hlint:
  #   name: hlint
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Run HLint
  #     env: 
  #       HLINT_VERSION: "3.8"
  #     run: |
  #       curl -L https://github.com/ndmitchell/hlint/releases/download/v${HLINT_VERSION}/hlint-${HLINT_VERSION}-x86_64-linux.tar.gz --output hlint.tar.gz
  #       tar -xvf hlint.tar.gz
  #       ./hlint-${HLINT_VERSION}/hlint src/ test/
